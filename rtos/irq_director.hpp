/**
 * @file irq_director.hpp
 * @author Petr Malan√≠k (TheColonelYoung(at)gmail(dot)com)
 * @version 0.1
 * @date 15.06.2021
 */

#pragma once

#include "vector"

#include "cmsis_os2.h"

class IRQ_handler;

using namespace std;

namespace RTOS{
/**
 * @brief   Hadles event generated by all IRQ Handler
 *          Should only exist one global instance of this class
 *          Wake up threads waiting for events
 *          Uses unique IDs of IRQ handlers to indeficy coresponding events
 */
class IRQ_director{
    /**
     * @brief   Vector of event flags, grow with amount of IRQ handlers
     */
    vector<osEventFlagsId_t> event_groups;

public:
    /**
     * @brief Signal IRQ of handler with given ID
     *
     * @param irq_id    ID of handler of which IRQ occurs
     */
    void Signal(uint16_t irq_id);

    /**
     * @brief Wait forever for IRQ event of given ID
     *
     * @param irq_id
     */
    void Wait(uint16_t irq_id);
};

    /**
     * @brief global instance of IRQ director
     */
    extern RTOS::IRQ_director IRQ_DIR;

    /**
     * @brief   Pass request for signaling to IRQ director
     *
     * @param irq   Pointer to IRQ handler
     */
    void IRQ_Signal(IRQ_handler *irq);

    /**
     * @brief Pass request for waiting to signal to IRQ director
     *
     * @param irq   Pointer to IRQ handler
     */
    void IRQ_Wait(IRQ_handler *irq);

}

