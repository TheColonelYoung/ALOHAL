/**
 * @file uart.hpp
 * @author Petr Malan√≠k (TheColonelYoung(at)gmail(dot)com)
 * @version 0.1
 * @date 03.10.2019
 */
#pragma once

#if   defined(MCU_FAMILY_STM32_F0)
# include "stm32f0xx_hal_uart.h"
#elif defined(MCU_FAMILY_STM32_F1)
# include "stm32f1xx_hal_uart.h"
#elif defined(MCU_FAMILY_STM32_F3)
# include "stm32f3xx_hal_uart.h"
#elif defined(MCU_FAMILY_STM32_F4)
# include "stm32f4xx_hal_uart.h"
#elif defined(MCU_FAMILY_STM32_F7)
# include "stm32f7xx_hal_uart.h"
#elif defined(MCU_FAMILY_STM32_L0)
# include "stm32l0xx_hal_uart.h"
#elif defined(MCU_FAMILY_STM32_L1)
# include "stm32l1xx_hal_uart.h"
#elif defined(MCU_FAMILY_STM32_L4)
# include "stm32l4xx_hal_uart.h"
#elif defined(MCU_FAMILY_STM32_G0)
# include "stm32g0xx_hal_uart.h"
#endif

#include <vector>
#include <string>

#include "global_includes.hpp"
#include "globals.hpp"
#include "gpio/pin.hpp"
#include "irq/irq_handler.hpp"
#include "uart/serial_line.hpp"
#include "rtos/thread.hpp"

#include "cmsis_os.h"

using namespace std;

/**
 * @brief   Perform communication over peripheral UART of MCU
 *          Contains HAL handler which is used to configuration and transmition
 *          Supports IRQ via IRQ Handler which is invocated after receiving of a byte
 *          Received bytes are stored as string and can be read out by length or delimeter
 */
class UART: public Serial_line {
private:
    /**
     * @brief Pointer to HAL handler structure which is passed in constructor
     */
    UART_HandleTypeDef *UART_Handler;

    /**
     * @brief Temporal buffer to which are saved data during receive
     */
    unsigned char UART_buffer_temp[2];

    /**
     * @brief Vector of messages which are wainting to be send over UART
     */
    vector<string> TX_buffer;

    /**
     * @brief Status flag of UART, if true is something is currently transmitted
     */
    bool busy = false;

    RTOS::RTOS_semaphore *sem = new RTOS::RTOS_semaphore();

public:
    /**
     * @brief Construct a new UART object
     */
    UART() = default;

    /**
     * @brief Construct a new UART object
     *
     * @param UART_Handler_set Pointer to HAL Handler structure generated by CubeMX
     */
    UART(UART_HandleTypeDef *UART_Handler_set);

    /**
     * @brief Transmitt C++ string over UART char by char
     *
     * @param message   Message to send
     * @return int      Error code
     */
    virtual int Send(string message) override final;

    int Send_poll(string message);

    /**
     * @brief   After IRQ occurs will copy received character from temporal buffer to internal RX buffer
     *
     * @return int  Actual size of RX buffer
     */
    virtual int Receive() override final;

    /**
     * @brief   Routine which is called when transmittion is done, will check if buffer contains
     *              another content to send, if yes will send it.
     *          Must be public method because is called from HAL IRQ handler HAL_UART_TxCpltCallback,
     *              which is outside of namespace of this class
     *
     * @return int  Actual size of transmitt buffer
     */
    int Resend();
};

/**
 * @brief   Callback called by HAL after any receive IRQ occurs
 *          This callback is shared by all UARTs
 *
 * @param huart Reference to handler of UART which triggered the IRQ RX callback
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);

/**
 * @brief   Callback called after buffer is transmitted
 *          This callback is shared by all UARTs
 *          Is used for notification that another transmittion can start now
 *
 * @param huart Reference to handler of UART which triggered the IRQ TX callback
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart); // Callback called after any send
